import java.util.*;
import paddle.*;

public class MorningStarController extends ServerState {

	private String address;
	private int port;
	private int id;
	private String name;
	private Map<Integer,Map<Integer,Integer>> registers;
	
	// NOTE: "function" is a MODBUS term, and essentially is a just memory address space or page.
	// All "function" address spaces are readable but only certain are writable
	
	public MorningStarController ( String address, int port, int id ) {
		this.address = address;
		this.port = port;
		this.id = id;
		name = this.getClass().getName()+":"+id+"@"+address+":"+port;
		registers = new HashMap<>();
	}

	public void read ( int function, int memAddress, int quantity ) {
		Bytes byteSpace = new Bytes( 4 );
		byteSpace.writeIntBE( memAddress, 0, 2 );
		byteSpace.writeIntBE( quantity, 2, 2 );
		int AHI = (int)byteSpace.read(0);
		int ALO = (int)byteSpace.read(1);
		int RHI = (int)byteSpace.read(2);
		int RLO = (int)byteSpace.read(3);
		String httpReqStr = "GET /MBCSV.cgi?ID="+id+"&F="+function+"&AHI="+AHI+"&ALO="+ALO+"&RHI="+RHI+"&RLO="+RLO+" HTTP/1.1\r\n\r\n";
		System.out.println( "httpReqStr: "+httpReqStr );
		(new OutboundTCP (
			this,
			address,
			port,
			name,
			httpReqStr.getBytes(),
			new byte[1024],
			memAddress,
			true
		)).timeout(10);
	}
	
	public void respond ( OutboundTCP query ) {
		String httpResponse = query.text();
		query.end();
		int httpDoubleReturn = httpResponse.indexOf("\r\n\r\n");
		int currentRegister = query.connectionId(); // using the connection ID to tag the start register
		if (httpDoubleReturn != -1) {
			String csvText = httpResponse.substring( httpDoubleReturn+4, httpResponse.length() );
			System.out.println("csvText: "+csvText);
			String[] csvTextArray = csvText.split(",");
			for (String item : csvTextArray) System.out.println( item );
			int function = Integer.parseInt(csvTextArray[1]);
			if (! registers.containsKey(function)) {
				registers.put( function, new HashMap<>() );
			}
			for (int i=3; i<csvTextArray.length; i+=2) {
				int upper = Integer.parseInt(csvTextArray[i]);
				if ((0x80 & upper) == 0x80) {
					//System.out.println( "upper before: "+upper );
					upper = ((-1)<<8)|upper;
					//System.out.println( "upper after: "+upper );
				};
				int upperShifted = upper << 8;
				int lower = Integer.parseInt(csvTextArray[i+1]);
				int combinedValue = upperShifted + lower;
				//System.out.println("upper: "+upper+", upperShifted: "+upperShifted+", lower: "+lower+", combinedValue: "+combinedValue);
				registers.get(function).put( currentRegister, combinedValue );
				currentRegister++;
			}
		}
	}
	
	public String name () {
		return name;
	}
	
	public Map<Integer,Map<Integer,Integer>> registers () {
		return registers;
	}
	
	public int register ( int function, int memAddress ) {
		if ( !registers.containsKey(function) || !registers.get(function).containsKey(memAddress) ) {
			read( function, memAddress, 1 );
			return 0;
		}
		return registers.get(function).get(memAddress);
	}
	
	public String toString () {
		return name()+" : "+registers.toString();
	}
	
	public double scalar ( int function, int intScaleReg, int fracScaleReg ) {
		double intScalar = (double)register( function, intScaleReg );
		double fracScalar = (double)register( function, fracScaleReg );
		return intScalar + fracScalar/65536; // first + second/2^16
	}
	
	public static void main ( String[] args ) throws Exception {
		MorningStarController msc = new MorningStarController( args[0], 80, 1 );
		System.out.println( msc );
		//msc.read( 3, 0, 91 );
		while(true) {
			System.out.println( msc );
			System.out.println( "Battery Voltage: "+msc.register( 3, 0x0018 )*msc.scalar( 3, 0x0000, 0x0001 )/32768 );
			System.out.println( "Battery Terminal Voltage: "+msc.register( 3, 0x0019 )*msc.scalar( 3, 0x0000, 0x0001 )/32768 );
			System.out.println( "Battery Current: "+msc.register( 3, 0x001C )*msc.scalar( 3, 0x0002, 0x0003 )/32768 );
			System.out.println( "Array Voltage: "+msc.register( 3, 0x001B )*msc.scalar( 3, 0x0000, 0x0001 )/32768 );
			System.out.println( "Array Current: "+msc.register( 3, 0x001D )*msc.scalar( 3, 0x0002, 0x0003 )/32768 );
			Thread.sleep(2000);
		}
	}
}

